2.unordered_map
（1）unordered_map底层基于哈希表实现，内部是无序的。
unordered_map是STL中的一种关联容器。
容器中元素类型为std::pair，pair.first对应键-key，pair.second对应值-value。
I. 容器中key具有唯一性，插入和查询速度接近于O(1)（在没有冲突的情况下）。
II. 通过key来检索value，因为会有rehash操作，而不是通过绝对地址（和顺序容器不同）
III. 使用内存管理模型来动态管理所需要的内存空间
（2）常见用法：
Key: .first(->first)
Value: .second(->second)
插入数据：.emplace .insert
判断内部是否为空：.empty（返回bool）
返回容器大小：.size(返回unsigned integral)
返回最大的数据:max_size
交换全部key和value:first.swap(second)
全部清零：clear
查找x是否在map中：unordered_map<int, int> mp;（若存在 mp.find(x)!=mp.end()）（若存在 mp.count(x)!=0）
初始元素：.begin
结尾元素：.end
删除元素：.erase(“”)
存在某元素：count(“”)存在返回1否则返回0
查找某元素：find()

3.类的静态成员
（1）在数据成员声明、函数前面加上关键字static 使得其与类关联在一起
（2）静态数据成员
    1） 在编译阶段分配内存 
2） 类内声明，类外初始化 
3） 所有对象共享同一份数据，基类对象和派生类对象共享基类的静态数据成员
4） 静态成员变量也是有访问权限的（public  private）
5） 静态数据成员可以作为成员函数的默认形参，而普通数据成员则不可以
 
6）静态数据成员的类型可以是所属类的类型，而普通数据成员则不可以。普通数据成员的只能声明为 所属类类型的指针或引用
7）静态数据成员在const函数中可以修改，而普通的数据成员是万万不能修改的
（3）静态成员函数
1）静态成员函数只能访问静态成员变量，不能调用非静态成员函数，但非静态成员函数可以调用静态成员函数
2）静态成员函数没有this指针，也就是说静态成员函数不能使用修饰符(也就是函数后面的const关键字)
3）静态成员函数的地址可用普通函数指针储存，而普通成员函数地址需要用 类成员函数指针来储存。
4）静态成员函数也是有访问权限的
注意: 
静态数据成员和静态成员函数都可以通过类或者对象的方式访问

4.lambda
（1）语法定义： [capture](parameters)mutable ->return-type{statement}
[capture]：捕捉列表。捕捉列表总是出现在Lambda函数的开始处。实际上，[]是Lambda引出符。编译器根据该引出符判断接下来的代码是否是Lambda函数。捕捉列表能够捕捉上下文中的变量以供Lambda函数使用;
(parameters)：参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号“()”一起省略;
mutable：mutable修饰符。默认情况下，Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）;
->return-type：返回类型。用追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”->”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导;
{statement}：函数体。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。
(2) 捕捉列表由多个捕捉项组成，并以逗号分隔。捕捉列表有以下几种形式：
1.[var]表示值传递方式捕捉变量var；
2.[=]表示值传递方式捕捉所有父作用域的变量（包括this）；
3.[&var]表示引用传递捕捉变量var；
4.[&]表示引用传递方式捕捉所有父作用域的变量（包括this）；
5.[this]表示值传递方式捕捉当前的this指针。

5.std::ostringstream  out；
（1）ostringstream是C++的一个字符集操作模板类，定义在sstream.h头文件中。ostringstream类通常用于执行C风格的串流的输出操作，格式化字符串，避免申请大量的缓冲区，替代sprintf
（2）std::ostringstream  ostr1;      //构造方式1
     ostr1 << “ostr1 “ << 2012 << endl;    //格式化，此处endl也将格式化进ostr1中
     cout << ostr1.str();                //输出要有.str()
//输出 ostr1  2012	
（3）std::ostringstream  ostr2(“abc”)     //构造方式2















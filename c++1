2.unordered_map
（1）unordered_map底层基于哈希表实现，内部是无序的。
unordered_map是STL中的一种关联容器。
容器中元素类型为std::pair，pair.first对应键-key，pair.second对应值-value。
I. 容器中key具有唯一性，插入和查询速度接近于O(1)（在没有冲突的情况下）。
II. 通过key来检索value，因为会有rehash操作，而不是通过绝对地址（和顺序容器不同）
III. 使用内存管理模型来动态管理所需要的内存空间
（2）常见用法：
Key: .first(->first)
Value: .second(->second)
插入数据：.emplace .insert
判断内部是否为空：.empty（返回bool）
返回容器大小：.size(返回unsigned integral)
返回最大的数据:max_size
交换全部key和value:first.swap(second)
全部清零：clear
查找x是否在map中：unordered_map<int, int> mp;（若存在 mp.find(x)!=mp.end()）（若存在 mp.count(x)!=0）
初始元素：.begin
结尾元素：.end
删除元素：.erase(“”)
存在某元素：count(“”)存在返回1否则返回0
查找某元素：find()

3.类的静态成员
（1）在数据成员声明、函数前面加上关键字static 使得其与类关联在一起
（2）静态数据成员
    1） 在编译阶段分配内存 
2） 类内声明，类外初始化 
3） 所有对象共享同一份数据，基类对象和派生类对象共享基类的静态数据成员
4） 静态成员变量也是有访问权限的（public  private）
5） 静态数据成员可以作为成员函数的默认形参，而普通数据成员则不可以
 
6）静态数据成员的类型可以是所属类的类型，而普通数据成员则不可以。普通数据成员的只能声明为 所属类类型的指针或引用
7）静态数据成员在const函数中可以修改，而普通的数据成员是万万不能修改的
（3）静态成员函数
1）静态成员函数只能访问静态成员变量，不能调用非静态成员函数，但非静态成员函数可以调用静态成员函数
2）静态成员函数没有this指针，也就是说静态成员函数不能使用修饰符(也就是函数后面的const关键字)
3）静态成员函数的地址可用普通函数指针储存，而普通成员函数地址需要用 类成员函数指针来储存。
4）静态成员函数也是有访问权限的
注意: 
静态数据成员和静态成员函数都可以通过类或者对象的方式访问

4.lambda
（1）语法定义： [capture](parameters)mutable ->return-type{statement}
[capture]：捕捉列表。捕捉列表总是出现在Lambda函数的开始处。实际上，[]是Lambda引出符。编译器根据该引出符判断接下来的代码是否是Lambda函数。捕捉列表能够捕捉上下文中的变量以供Lambda函数使用;
(parameters)：参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号“()”一起省略;
mutable：mutable修饰符。默认情况下，Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）;
->return-type：返回类型。用追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”->”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导;
{statement}：函数体。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。
(2) 捕捉列表由多个捕捉项组成，并以逗号分隔。捕捉列表有以下几种形式：
1.[var]表示值传递方式捕捉变量var；
2.[=]表示值传递方式捕捉所有父作用域的变量（包括this）；
3.[&var]表示引用传递捕捉变量var；
4.[&]表示引用传递方式捕捉所有父作用域的变量（包括this）；
5.[this]表示值传递方式捕捉当前的this指针。

5.std::ostringstream  out；
（1）ostringstream是C++的一个字符集操作模板类，定义在sstream.h头文件中。ostringstream类通常用于执行C风格的串流的输出操作，格式化字符串，避免申请大量的缓冲区，替代sprintf
（2）std::ostringstream  ostr1;      //构造方式1
     ostr1 << “ostr1 “ << 2012 << endl;    //格式化，此处endl也将格式化进ostr1中
     cout << ostr1.str();                //输出要有.str()
//输出 ostr1  2012	
（3）std::ostringstream  ostr2(“abc”)     //构造方式2

6.#define 后面加 # 和 ##
（1）#define后面如果再加一个 # 号，那么这个符号的作用是文本参数“字符串化”，即出现在宏定义字符文本中的#把跟在后面的参数转换成一个C++字符串常量。
#define POUT1(x)  printf(#x);
#define POUT2(x)  printf(x);

POUT1(Hello World!); //语法正确
POUT1("Hello World!");//语法也正确

POUT2(Hello World!);//语法错误
POUT2("Hello World!");//语法正确

（2）#define后面如果再加## 号，那么这个##的作用是将两个字符文本连接成一个字符文本，如果其中一个字符文本是宏定义的参数，连接会在参数替换后发生。

#define SET1(arg) A##arg=arg;
#define SET2(arg) Aarg=arg;

SET1(1); //宏替换将SET1(1)替换为 A1=1；
SET2(1);//宏替换将SET1(1)替换为Aarg=1

7.grep 查找文件内容，并输出到文件
grep ‘search-string’ server.log > ~/log/test.log

在文件server.log中查找 ‘search-string’ 并输出到用户目录下的/log/test.log文件中:

如果test.log已存在，输出的内容将会覆盖test.log文件原有的内容
如果test.log不存在，则会创建test.log文件并输出查找到的内容

若想实现输出的日志只执行追加操作而不覆盖原有的内容，可以使用 >> 代替 >即可,如下：
grep ‘search-string’ server.log >> ~/log/test.log
同样的原理，tail、head等命令输出的内容也可以使用这样的方式输出到文件中
注意：
>  ：截断写，原有的内容清空
	>> ：追加写

8.将cout输出写入文件
#include <fstream>
#include <iostream>
#include <ostream>
#include <streambuf>

int main(){
	//打开写入文件
std::ofstream fileOut("b.txt");			
//把cout的输出流重定向到输出文件的输出流，coutOld，指向原有的输出流，用于恢复
std::streambuf *coutOld = std::cout.rdbuf(fileOut.rdbuf());			
std::cout << "this is first test message" << std::endl;			//会被写入文件
    std::cout.rdbuf(coutOld);									//恢复
    std::cout << "this is second test message" << std::endl;		//输出
    return 0;
}

注意：
（1）cout可以调用rdbuf来替换缓冲区，但log不能通过调用rdbuf来替换缓冲区。因为ofstream的rdbuf并没有同样的功能
（2）对流的重定向，只是作用在一个代码块内{}，出了这个{}，就恢复为原来的了，但是对在这个代码块内调用的函数，重定向也会生效。

9.dec、hex和oct（十进制、十六进制、八进制）
dec是十进制 如	cout<<dec<<b 	就会把b转换成10进制再输出
hex是16进制 如	cout<<hex<<b 	就会把b转换成16进制再输出
oct是8进制 如	cout<<oct<<b 	就会把b转换成8进制再输出

10.类型转换：
（1）char转整型
	char c = ‘5’;
	int  I = c – ‘0’ ;     // 不能用stoi(c);
(2) char转字符串
  char c = ‘5’;
	strintg  str;       // 注：不存在 string s = c; 这样的写法，因为没有这样的构造函数
	str = c;
（3）int 转string
	int a = 3;
	string s = to_string(a);
（4）int转char:（0-9）
	int a = 3;
	char c = a + 48;
（5）C的字符串和C++的字符串类型是不一样的，要转换
       C转C++:
                char  c1[] = “hello”;
                string  s = c1;
       C++转C:
                string  s = “hello”;
                const  char  *c1 = s.c_str();
注意：C++转C ,  c_str()返回的是const  char*类型，所以前面要加const，注意类型的匹配。

11.查找进程：

1）依据输入的命令查找：
ps  -ef | grep  xmlserver
// 可以查找输入命令有 xmlserver 的进程

-e : 显示所有进程 
-f : 全格式 
-h : 不显示标题 
-l : 长格式 
-w : 宽输出 
a ：显示终端上的所有进程，包括其他用户的进程。 
r ：只显示正在运行的进程。 
u ：以用户为主的格式来显示程序状况。 
x ：显示所有程序，不以终端机来区分。
（2）字段含义如下：
UID       PID       PPID      C     STIME    TTY       TIME         CMD
zzw       14124    13991       0     00:38      pts/0      00:00:00    grep --color=auto dae

UID      ：程序被该 UID 所拥有
PID      ：就是这个程序的 ID 
PPID    ：则是其上级父程序的ID
C          ：CPU使用的资源百分比
STIME ：系统启动时间
TTY     ：登入者的终端机位置
TIME   ：使用掉的CPU时间。
CMD   ：所下达的是什么指令

2）依据端口号查找：
netstat  -antp | grep  9191
// 可以查找端口号为 9191 的进程
-t ：列出 TCP 协议
-u ：列出  UDP 协议
-l  ：仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)
-p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。
-n: 不进行DNS轮询，显示IP(可以加速操作)

12.C++将一个cpp文件中的变量应用到另一个cpp文件中
情况说明：
有两个cpp文件 ： A.cpp   B.cpp   头文件为 A.h  B.h
其中A.cpp中定义了一个函数void a()，该函数生成一个变量C，现在要将C的值在B.cpp中使用。

（1）方法1：
在A.cpp中将C声明成全局变量，然后在B.cpp中先用extern type C先声明，然后调用。如使用cout<<C<<endl; 可用输出此时C的值。

（2）方法2：
在A.h中声明extern type C，然后在B.cpp中#include "A.h"，这样就可以在B中使用变量C了。


13.<sstream>
<sstream> 定义了三个类：
istringstream: 流的输入
ostringstream : 流的输出
stringstream : 流的输入输出操作。

<sstream> 主要用来进行数据类型转换，由于 <sstream> 使用 string 对象来代替字符数组（snprintf 方式），避免了缓冲区溢出的危险；而且，因为传入参数和目标对象的类型会被自动推导出来，所以不存在错误的格式化符号的问题。简单说，相比 C 编程语言库的数据类型转换，<sstream> 更加安全、自动和直接。

（1）数据类型转换：（int  ->  string）
     stringstream  sstream;
     string  str;
     int  n = 1000;
     sstream << n;      //int 放入输入流
     sstream >> str;     //从sstream中抽取前面插入的int类型的数据，赋给string类型
注意：
    如果想清空 stringstream，使用 sstream.str(""); 方式；clear() 方法适用于进行多次数据类型转换的场景。
若要多次转换，不同转换之间要sstream.clear(); 进行清空
例如： （int  –>  str）  
sstream.clear()   
    （bool  ->  int）
// 若不加sstream.clear()，第二次转换可能出错

（2）按空格分隔字符串
istringstream str("this is a text");
string out;
while (str >> out) {
	cout << out << endl;
}
// istringstream 换为 stringstream 也可以

14. struct中的位域：struct {int i：4}
为了节省空间，可以把几个数据压缩到少数的几个类型空间上，比如需要表示二个3位二进制的数，一个2位二进制的数，则可以用一个8位的 字符表示之。
struct
{char a : 3;
char b : 3;
char c : 2;} ;
这个结构体所占空间为一个字节，8位。节省了空间

15.std::this_thread::yield：和 std::this_thread::sleep_for：
（1）std::this_thread::yield：　当前线程放弃执行，操作系统调度另一线程继续执行。即当前线程将未使用完的“CPU时间片”让给其他线程使用，等其他线程使用完后再与其他线程一起竞争"CPU"。
（2）std::this_thread::sleep_for：　表示当前线程休眠一段时间，休眠期间不与其他线程竞争CPU，根据线程需求，等待若干时间。

16.fflush()函数：更新缓存区。（C语言的，C++ 直接 << flush)
头文件：#include<stdio.h>
函数定义：int fflush(FILE *stream);
函数说明：调用fflush()会将缓冲区中的内容写到stream所指的文件中去.若stream为NULL，则会将所有打开的文件进行数据更新。
fflush(stdin)：刷新缓冲区,将缓冲区内的数据清空并丢弃。
fflush(stdout)：刷新缓冲区,将缓冲区内的数据输出到设备。

17.C++ 的字符串和sizeof
   sizeof(string)和字符串的长度是无关的，在一个系统中所有的sizeof(string)是一个固定值，这个和编译器相关，string字符串是存储在堆上，这个属于动态分配的空间，对于别的整形浮点型数据类型则没有这个问题。
   
注意C和C++字符串的区别：
C++:
string  s = “”;
string  s1 = “hello world”;
// sizeof(s) == sizeof(s1) 不管里面存的什么东西，sizeof都是相等的，是固定值，由系统和编译器决定。

C :
    char  s2[] = “hello”              // sizeof(s2) = 6   最后会有一个’\0’
    char  s3[] = “hello world”;        // sizeof(s3) = 12

sizeof（string）的值，在vs2010上测得是固定28，用CLion，上面测得是4，出现了不一样的结果，在vs2013上是32.

查阅了相关资料得出结论：string的实现在各库中可能有所不同，但是在同一库中相同一点是，无论你的string里放多长的字符串，它的sizeof()都是固定的，字符串所占的空间是从堆中动态分配的，与sizeof()无关。 sizeof(string)=4可能是最典型的实现之一，不过也有sizeof()为28、32字节的库实现。 但是MS2015测试后sizeof(string)=40.还是跟编译器有关.

由于sizeof不能被编译成机器码，所以sizeof作用范围内，也就是()里面的内容也不能被编译，而是被替换成类型。=操作符返回左操作数的类型，所以a=3相当于int

不要把sizeof当成函数，也不要看作一元操作符，把他当成一个特殊的编译预处理。

18.C 和 C++字符串转换
ambda 函数提示：No matching function for call to object of type
原因：参数类型不匹配
      （1）lambda函数定义中的参数和实际的参数有const和非const的区别
      （2）C的字符串和C++的字符串类型是不一样的，要转换
       C转C++:
                char  c1[] = “hello”;
                string  s = c1;
       C++转C:
                string  s = “hello”;
                const  char  *c1 = s.c_str();
注意：C++转C ,  c_str()返回的是const  char*类型，所以前面要加const，注意类型的匹配。

19.在C 或 C++ 代码中加入汇编：
#define PMC_START()   ({ __asm__ volatile("dmb sy\n\torr x3,x3,x3\n":::"memory"); })
#define PMC_END()     ({ __asm__ volatile("dmb sy\n\torr x4,x4,x4\n":::"memory"); })

20.fread
https://blog.csdn.net/shulianghan/article/details/117338844?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166269486716800182179975%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166269486716800182179975&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-117338844-null-null.142^v47^pc_rank_34_ecpm25,201^v3^control&utm_term=fread&spm=1018.2226.3001.4187

21.feof
https://blog.csdn.net/konghouy/article/details/80530937?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166270675816782391813871%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166270675816782391813871&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80530937-null-null.142^v47^pc_rank_34_ecpm25,201^v3^control&utm_term=feof&spm=1018.2226.3001.4187

22.（1）char转整型
	char c = ‘5’;
	int  I = c – ‘0’ ;     // 不能用stoi(c);
(2) char转字符串
  char c = ‘5’;
	strintg  str;       // 注：不存在 string s = c; 这样的写法，因为没有这样的构造函数
	str = c;
（3）int 转string
	int a = 3;
	string s = to_string(a);
（4）int转char:（0-9）
	int a = 3;
	char c = a + 48;
（5）C的字符串和C++的字符串类型是不一样的，要转换
       C转C++:
                char  c1[] = “hello”;
                string  s = c1;
       C++转C:
                string  s = “hello”;
                const  char  *c1 = s.c_str();
注意：C++转C ,  c_str()返回的是const  char*类型，所以前面要加const，注意类型的匹配。



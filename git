1.安装：sudo apt install git-all  （ubuntu）
sudo dnf install git-all  （centos）

2. 初始化本地库：   git init
    查看本地库状态：   git status
查看所有的配置以及它们所在的文件：    git config --list --show-origin
   查看配置：    git config –l
   查看系统配置：  git config --system --list
查看用户配置：  git config --global –list

3. 设置你的用户名和邮件地址：
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置

4. 检查你的配置，列出所有 Git 当时能找到的配置
	使用 git config --list 

5.  git config <key>： 来检查 Git 的某一项配置
例：$ git config user.name
John Doe

6.  生成公钥：ssh-keygen
    公钥位置：home/.ssh/id_rsa.pub （pub：public缩写）
 克隆现有的仓库
git clone https://github.com/libgit2/libgit2

7.  git status 命令查看哪些文件处于什么状态
   工作目录下的每一个文件都不外乎这两种状态：已跟踪 或 未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。

8.  git add 开始跟踪一个文件
例：要跟踪 README 文件  git add README

9. git status 查看仓库当前的状态，命令的输出十分详细，但其用语有些繁琐。 Git 有一个选项可以帮你缩短状态命令的输出，这样可以以简洁的方式查看更改。 如果你使用 git status -s 命令或 git status --short 命令，你将得到一种格式更为紧凑的输出。
$ git status -s
M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示： README 文件在工作区已修改但尚未暂存，而 lib/simplegit.rb 文件已修改且已暂存。 Rakefile 文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。


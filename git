https://github.com/plctlab/riscv-operating-system-mooc

常用命令
git add README    跟踪 README 文件  
git  rm  --cached  filename     从暂存区、本地库删除filename文件
git commit -m  “” fn    把文件提交到仓库（commit 命令后添加 -m 选项，将提交信息与命令放在同一行   例：git  commit  -m  “wrote  a  readme”  filen）
git status          仓库当前的状态，会显示还没有添加到本地仓库的文件
git ls-files         查看已存放到本地仓库的文件
git rm -r --cached file  删除本地仓库文件
git diff           当前文件和暂存区域快照之间的差异
git diff --staged    比对已暂存文件与最后一次提交的文件差异
git log           显示从最近到最远的提交日志
                （git log  --pretty=oneline 或者 git reflog简洁输出）
git reset --hard HEAD^  回退到上一个版本用(HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写成HEAD~100。)
git checkout  --  file   vim修改了文件，退出后，丢弃文件的修改
git reset HEAD file（版本回退）+ git  checkout  --  file  （文件添加到了暂存区，丢弃修改）
git rm a.txt        删除a.txt文件
git branch dev     创建dev分支
git checkout dev   切换到dev分支
git checkout -b dev  创建并切换到dev分支（相当于上两条命令）
git branch -a      查看所有本地及远端分支
git branch         查看当前分支（*表示当前分支，master是git的主分支）
git merge dev   合并dev分支到当前分支（合并后master可以看到dev分支对文件的修改
若有冲突，需要手动打开文件修改，之后添加、提交，提交时不能带文件名、空着）
git branch -d dev   删除dev分支
git pull           将远程的信息拉下来
git add .  +  git commit -m “”  +  git push origin dev     这几步将代码推至了远程
git branch -vv        查看本地分支+上次提交的信息+本地和远程分支的关系
git remote add 别名 远程地址     创建远程仓库别名
git remote -v         看远程仓库别名和链接
git clone -b 分支名 url   克隆需要的分支（git clone -b develop ssh://git@lfg-y.codehub.huawei.com:2222/LinxCMT/TraceManager.git）
git branch --unset-upstream     解除本地分支与远程分支的链接
git branch -u origin/dev-stable    将本地所在分支与远程origin/dev-stable分支相连接
git push 别名 分支         推送本地分支到远程仓库（例：git push origin master）
git pull 远程库别名 远程分支名      拉取远程库内容（例：git pull origin master）
git commit --amend       可以查看修改提交描述信息
git merge --abort       当合并的过程中，由于冲突难解决，你想放弃合并，回到未合并之前的状态；
git log --graph --pretty=oneline --abbrev-commit    可以在命令行方便地查看提交图
git checkout -b b-master origin/master  #作用是checkout远程的master分支，在本地起名为b-master分支，并切换到本地的b-master分支
git pull origin master --rebase   更远程新源到本地

修改本地分支名称
git branch -m oldBranchName newBranchName

将本地分支的远程分支删除
git push --delete origin oldBranchName

将改名后的本地分支推送到远程，并将本地分支与之关联
git push --set-upstream origin newBranchName

git log --name-status    可以看到修改了哪些文件
git commit  --amend     可以修改描述信息
git diff  local-dev  remote-dev  比较本地分支与远程分支的差异
git  cherry-pick  commitid     把其他分支的commit提交同步到当前分支

git diff <版本号1> <版本号2> <文件路径>
`<版本号1>` 和 `<版本号2>` 分别表示需要比较的两个版本号，
`<文件路径>` 表示需要比较的文件路径

git diff abc123 def456 example.txt
比较版本号为 `abc123` 和 `def456` 的同一个文件 `example.txt` 的修改




设置别名：
Home目录下.gitconfig添加
[alias]
     lg = log --graph --pretty=oneline --abbrev-commit
git config –glo




问题：
1.git  pull时出现错误
error: Your local changes to the following files would be overwritten by merge
（1）想保留刚才本地修改的代码，并把git服务器上的代码pull到本地（本地刚才修改的代码将会被暂时封存起来）
1.	git stash  
2.	git pull origin master  
3.	git stash pop  
（2）完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull
1.	git reset --hard  
2.	git pull origin master
git stash：备份当前工作区内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前工作区内容保存到Git栈中
git pull：拉取服务器上当前分支代码
git stash pop：从Git栈中读取最近一次保存的内容，恢复工作区相关内容。同时，用户可能进行多次stash操作，需要保证后stash的最先被取到，所以用栈（先进后出）来管理；pop取栈顶的内容并恢复
git stash list：显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。
git stash clear：清空Git栈

2. git  pull出现错误
error: Pulling is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.
错误：无法提取，因为您有未合并的文件。
提示：在工作树中修复它们，然后使用 'git add/rm <file>'
提示：酌情标记解决方案并进行提交。
致命的：由于未解决的冲突而退出。
解决：（1）git  add  .
     （2）git  commit  -m  “ “
     （3）git  pull

3.git  pull  时无法更新最新代码（缺少文件）
可能原因：本地把文件删除了，操作还没有提交
解决： git  status   查看文件状态，看是否有删除文件
       将其恢复即可

4.合并分支发生合并冲突：（git  merge  hot-fix）
（1）git  status  查看哪些文件存在冲突
（2）手动打开文件  vim  filename
特殊符号：<<<<<<< HEAD 
当前分支的代码 
======= 
合并过来的代码 
>>>>>>> hot-fix
（修改成自己想要的样子）
（3）添加到暂存区：  git  add  filename
（4）执行提交： git  commit  -m  “  “
   (此时使用 git commit 命令时不能带文件名）
发现后面 MERGING 消失，变为正常

4.git pull  
remote: HTTP Basic: Access denied
fatal: Authentication failed for
可能原因：更改了密码，所以无法访问
解决：
（1）如果账号密码有变动 用这个命令 git config –system –unset credential.helper 重新输入账号密码 应该就能解决了

（2）如果用了第一个命令 还不能解决问题那么 用这个命令：git config –global http.emptyAuth true

（3）直接使用命令行自动登录git clone --bare http://username:password@https:xxx.cn/package1/myProject.git
如果username使用的邮箱，那么@要用%40来代替，如我的邮箱为abc@qq.com 写成 abc%40qq.com

（4）如果以上三个方法不起作用，那么采用以下方法：
进入控制面板>>查看方式改为小图标>>凭据管理器>>windows凭据>>普通凭据，在里面找到git，点开编辑密码，更新为最新密码之后就可以正常操作了

6.rebase时出现CONFLICT (delete/modify)
原因：可能是远程删除了代码，本地的代码还在，这时git不知道怎么做
解决：git rm filename    // 删除本地文件就可以了

7.git clone 时报错
Host key verification failed.
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
解决：把ssh链接改为https链接


git diff
1. 查看两分支间，所有有差异的文件列表
git diff branch1 branch2 --stat
2. 查看两分支间，所有有差异的文件的详细差异
git diff branch1 branch2
3. 查看两分支间，指定文件的不同
git diff  branch1 branch2 filename

git reset
1. 撤回还未 push 的 commit
git reset --soft HEAD^







1.安装：sudo apt install git-all  （ubuntu）
sudo dnf install git-all  （centos）

2. 初始化本地库：   git init
    查看本地库状态：   git status
查看所有的配置以及它们所在的文件：    git config --list --show-origin
   查看配置：    git config –l
   查看系统配置：  git config --system --list
查看用户配置：  git config --global –list

3. 设置你的用户名和邮件地址：
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置

4. 检查你的配置，列出所有 Git 当时能找到的配置
	使用 git config --list 

5.  git config <key>： 来检查 Git 的某一项配置
例：$ git config user.name
John Doe

6.  生成公钥：ssh-keygen
    公钥位置：home/.ssh/id_rsa.pub （pub：public缩写）
 克隆现有的仓库
git clone https://github.com/libgit2/libgit2

7.  git status 命令查看哪些文件处于什么状态
   工作目录下的每一个文件都不外乎这两种状态：已跟踪 或 未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。

8.  git add 开始跟踪一个文件
例：要跟踪 README 文件  git add README

9. git status 查看仓库当前的状态，命令的输出十分详细，但其用语有些繁琐。 Git 有一个选项可以帮你缩短状态命令的输出，这样可以以简洁的方式查看更改。 如果你使用 git status -s 命令或 git status --short 命令，你将得到一种格式更为紧凑的输出。
$ git status -s
M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示： README 文件在工作区已修改但尚未暂存，而 lib/simplegit.rb 文件已修改且已暂存。 Rakefile 文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。

10. 有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式
$ cat .gitignore
*.[oa]
*~
第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件
第二行告诉 Git 忽略所有名字以波浪符（~）结尾的文件
.gitignore 的格式规范如下：
•	所有空行或者以 # 开头的行都会被 Git 忽略。
•	可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。
•	匹配模式可以以（/）开头防止递归。
•	匹配模式可以以（/）结尾指定目录。
•	要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。
# 忽略所有的 .a 文件
*.a
# 跟踪所有的 lib.a，即便你在前面忽略了 .a 文件
!lib.a
# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO
/TODO
# 忽略任何目录下名为 build 的文件夹
build/
# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt
doc/*.txt
# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件
doc/**/*.pdf
（2）在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）
  [user]
      name = Layne 
email = Layne@atguigu.com 
[core]
 excludesfile = C:/Users/asus/.gitignore 
注意：这里要使用“正斜线（/）”，不要使用“反斜线（\）”

11. 修改之后还没有暂存起来的变化内容： git diff
   比对已暂存文件与最后一次提交的文件差异： git diff –staged
   要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作

1.shell获取当前脚本的绝对路径
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

2.用python执行shell
(1)执行shell命令
import os
os.system(‘ls’)   // 执行 ls 命令
// 其中最后一个0是这个命令的返回值，为0表示命令执行成功。使用system无法将执行的结果保存起来

（2）执行shell脚本
import os
os.system(‘./hello.sh’)  // 执行hello.sh脚本

（3）当shell需要传入参数时
import os
import sys
argo = sys.argv[1]
arg1 = sys.argv[2]
os.system(‘./hello.sh ’+arg0+' '+arg1)  //在python脚本中调用shell脚本，并传入参数，注意参数前后要有空格

3.shell传参
我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
#!/bin/bash

echo "Shell 传递参数实例！";
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";

$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。
如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-	显示Shell使用的当前选项，与set命令功能相同。

$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。

$* 与 $@ 区别：
•	相同点：都是引用所有参数。
•	不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。


4. shell  脚本中调用另一个脚本
   . 绝对路径
// 注意 ：  . 和绝对路径之间有空格


#!/bin/bash

SCONS=$(which scons)
PYTHON=$(which python3)

BUILD_OPT="ARM"
CFLAGS="${CFLAGS} -DLINX_ARCH"
LDFLAGS="${LDFLAGS}"
CC="gcc"
CXX="g++"
MODE="opt"
DB="false"
JOBS=40

usage() {
    echo "Usage: $0 [-m MODE] [-j JOBS] [-l] [-d] [-h]"
    echo "Description:"
    echo "  -m MODE, MODE can be opt|debug|fast|prof|perf, default: opt"
    echo "  -j JOBS, default 40"
    echo "  -l, use ARM_LinxCPU as build_opt, defaultly use ARM"
    echo "  -d, generate compile_commands.json, require clang installed,"
    echo "      default false"
    echo "  -h, print this message"
}

while getopts 'm:j:dhl' options; do
    case "${options}" in
        m)
            MODE=${OPTARG}
            ;;
        j)
            JOBS=${OPTARG}
            ;;
        d)
            CFLAGS="${CFLAGS} -MJ \\\$TARGET\.json"
            CC="clang"
            CXX="clang++"
            DB="true"
            ;;
        h)
            usage
            exit 0
            ;;
        l)
            BUILD_OPT="ARM_LinxCPU"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [[ "$MODE" == "debug" && "$CXX" == "clang++" ]]; then
    CFLAGS="${CFLAGS} -fstandalone-debug"
    LDFLAGS="${LDFLAGS} -fstandalone-debug"
fi

echo "Compile commands:"
echo "$PYTHON $SCONS \
SLICC_HTML=yes CCFLAGS_EXTRA=\"$CFLAGS\" \
LDFLAGS_EXTRA=\"${LDFLAGS}\" CC=\"$CC\" CXX=\"$CXX\" \
build/$BUILD_OPT/gem5.$MODE -j${JOBS}"

$PYTHON $SCONS \
    SLICC_HTML=yes CCFLAGS_EXTRA="$CFLAGS" \
    LDFLAGS_EXTRA="${LDFLAGS}" CC="$CC" CXX="$CXX" \
    build/$BUILD_OPT/gem5.$MODE -j${JOBS}

if [[ $? -eq 0 && "$DB" == "true" ]]; then
    echo "Generating compile_commands.json"
    shopt -s globstar
    pushd build
    rm -f compile_commands.json
    sed -e '1s/^/[\n/' -e '$s/,$/\n]/' **/*.json > compile_commands.json
    if [ -f "compile_commands.json" ]; then
        sed -i -e 's/'"build\/${BUILD_OPT}\/"'/src\//g' \
            -e 's/''"-I", "build\/'"${BUILD_OPT}"'"/"-I", "src", "-I", "build\/'"${BUILD_OPT}"'"/g' \
            compile_commands.json
    fi
    popd
fi


（1）
list(TRANSFORM _rel_files PREPEND ${CMAKE_CURRENT_SOURCE_DIR}/ OUTPUT_VARIABLE _abs_files)

- `_rel_files`：需要转换为绝对路径的相对路径文件列表，可以是一个或多个文件。
- `PREPEND ${CMAKE_CURRENT_SOURCE_DIR}/`：在相对路径前添加 `${CMAKE_CURRENT_SOURCE_DIR}/`，即将相对路径转换为相对于当前源代码目录的绝对路径。
- `OUTPUT_VARIABLE _abs_files`：将转换后的绝对路径文件列表保存到变量 `_abs_files` 中，以便后续使用。

总的来说，这个命令的作用是将相对路径文件列表转换为绝对路径文件列表，以便在后续的 CMake 构建过程中使用。

（2）
set(_rel_cpp_files ${_rel_files})
list(FILTER _rel_cpp_files INCLUDE REGEX ".cpp$")
target_sources(${_curr_lib} PRIVATE ${_rel_Cpp_files})

首先，它定义了一个变量 `_rel_cpp_files`，将其赋值为变量 `_rel_files` 的值。然后，使用 `list(FILTER)` 命令，将 `_rel_cpp_files` 中的文件名筛选出以 `.cpp` 结尾的文件，将结果存储回 `_rel_cpp_files` 中。

最后，使用 `target_sources` 命令，将 `_rel_cpp_files` 中的文件添加到当前目标库 `_curr_lib` 的源文件列表中，使其编译链接到目标库中。这样，在编译目标库时，CMake 将会自动编译这些源文件，并将其链接到生成的库中。

（3）
set(_rel_src_files ${_rel_files})
list(FILTER _rel_src_files EXCLUDE REGEX ".cfg$")

函数使用 `list(FILTER)` 命令将 `_rel_src_files` 列表中符合正则表达式 `'.cfg$'` 的元素过滤掉，只保留非 `.cfg` 文件。

（4）
add_custom_target( ${_curr_lib}_gen_files
COMMAND ${MODEL_ROOT}/build_util/gen-config.py -i ${def_file} -o ${_rel_files}
BYPRODUCTS ${_abs_files}
SOURCES ${_rel_src_files}
WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR]
COMMENT "Generate ${ARGN} in ${CMAKE_CURRENT_SOURCE_DIR]"
)
上面的 CMake 代码定义了一个自定义目标（custom target），名称为 `${_curr_lib}_gen_files`，它的命令是运行 `${MODEL_ROOT}/build_util/gen-config.py` 脚本，该脚本需要输入参数 `-i ${def_file}` 和 `-o ${_rel_files}`，其中 `${def_file}` 和 `${_rel_files}` 是变量，需要在其他地方定义它们的值。这个自定义目标的副产品（byproducts）是 `${_abs_files}`，源文件（sources）是 `${_rel_src_files}`，这两个变量的值也需要在其他地方定义。此外，这个自定义目标的工作目录（working directory）是 `${CMAKE_CURRENT_SOURCE_DIR}`，即当前的源代码目录。最后，这个自定义目标还有一个注释（comment），即 `'Generate ${ARGN} in ${CMAKE_CURRENT_SOURCE_DIR}'`，其中 `${ARGN}` 是一个特殊的变量，代表了该自定义目标的参数列表。

（5）
add_dependencies(${_curr_lib} ${_curr_lib}_gen_files)

${_curr_lib} 是当前库的名称变量，${_curr_lib}_gen_files 是当前库生成的文件名称变量。

add_dependencies 函数的作用是将当前库与其依赖的其他库或生成的文件关联起来，告诉 CMake 在构建当前库之前需要先构建其依赖项。

例如，如果当前库需要依赖 libA 和 libB，那么可以在 CMakeLists.txt 中使用 add_dependencies(${_curr_lib} libA libB) 来声明这些依赖关系。这样在构建当前库时，CMake 会先构建 libA 和 libB，然后再构建当前库。同理，如果当前库生成了一些文件，也可以使用 add_dependencies 函数将这些文件与当前库关联起来，告诉 CMake 在构建当前库之前需要先生成这些文件。

Cmake 中输出变量信息：
message(“VAR_NAME = ${VAR_NAME}”)

